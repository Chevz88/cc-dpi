name: Android CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Install Android cmdline-tools
        run: |
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          cd "$ANDROID_HOME/cmdline-tools"
          curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q commandlinetools.zip
          mv cmdline-tools latest
          rm commandlinetools.zip

      - name: Accept all SDK licenses & install full packages
        run: |
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          mkdir -p ~/.android && echo '### User Agreements accepted' > ~/.android/repositories.cfg
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "emulator" \
            "extras;android;m2repository" \
            "extras;google;m2repository" \
            "extras;google;google_play_services" \
            "extras;google;gcm"

      - name: Install Gradle
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.0
          gradle --version

      - name: Create settings.gradle
        run: |
          echo "pluginManagement {" > settings.gradle
          echo "    repositories {" >> settings.gradle
          echo "        google()" >> settings.gradle
          echo "        mavenCentral()" >> settings.gradle
          echo "        gradlePluginPortal()" >> settings.gradle
          echo "    }" >> settings.gradle
          echo "}" >> settings.gradle
          echo "dependencyResolutionManagement {" >> settings.gradle
          echo "    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)" >> settings.gradle
          echo "    repositories {" >> settings.gradle
          echo "        google()" >> settings.gradle
          echo "        mavenCentral()" >> settings.gradle
          echo "    }" >> settings.gradle
          echo "}" >> settings.gradle
          echo "rootProject.name = \"cc-dpi\"" >> settings.gradle
          echo "include ':app'" >> settings.gradle

      - name: Create root build.gradle
        run: |
          echo "buildscript {" > build.gradle
          echo "    repositories {" >> build.gradle
          echo "        google()" >> build.gradle
          echo "        mavenCentral()" >> build.gradle
          echo "    }" >> build.gradle
          echo "    dependencies {" >> build.gradle
          echo "        classpath \"com.android.tools.build:gradle:8.0.2\"" >> build.gradle
          echo "        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.22\"" >> build.gradle
          echo "    }" >> build.gradle
          echo "}" >> build.gradle
          echo "allprojects {" >> build.gradle
          echo "    repositories {" >> build.gradle
          echo "        google()" >> build.gradle
          echo "        mavenCentral()" >> build.gradle
          echo "    }" >> build.gradle
          echo "}" >> build.gradle
          echo "task clean(type: Delete) {" >> build.gradle
          echo "    delete rootProject.buildDir" >> build.gradle
          echo "}" >> build.gradle

      - name: Restructure project
        run: |
          mkdir -p app/src/main
          if [ -d "CC-DPI-App" ]; then
            mv CC-DPI-App/app/build.gradle app/
            mv CC-DPI-App/app/src/* app/src/main/
            rm -rf CC-DPI-App
          fi

      - name: Build Android project
        run: |
          gradle :app:assembleDebug \
            --no-daemon \
            --stacktrace \
            --info

      - name: Find Debug APK
        id: find_apk
        run: |
          debug_apk=$(find app/build/outputs/apk -name "*debug*.apk" | head -1)
          if [ -z "$debug_apk" ]; then
            echo "APK not found! Project structure:"
            find . -maxdepth 3 -type d -print | sort
            exit 1
          fi
          echo "debug_apk=${debug_apk}" >> $GITHUB_OUTPUT
          echo "Debug APK: ${debug_apk}"

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: ${{ steps.find_apk.outputs.debug_apk }}
